#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""pipreqs - Generate pip requirements.txt file based on imports

Usage:
    pipreqs [options] <path>

Options:
    --use-local           Use ONLY local package info instead of querying PyPI
    --pypi-server <url>   Use custom PyPi server
    --proxy <url>         Use Proxy, parameter will be passed to requests library. You can also just set the
                          environments parameter in your terminal:
                          $ export HTTP_PROXY="http://10.10.1.10:3128"
                          $ export HTTPS_PROXY="https://10.10.1.10:1080"
    --debug               Print debug information
    --ignore <dirs>...    Ignore extra directories, each separated by a comma
    --encoding <charset>  Use encoding parameter for file open
    --savepath <file>     Save the list of requirements in the given file
    --print               Output the list of requirements in the standard output
    --force               Overwrite existing requirements.txt
    --diff <file>         Compare modules in requirements.txt to project imports.
    --clean <file>        Clean up requirements.txt by removing modules that are not imported in project.
"""
import os
import sys
import re
import logging
import codecs
import ast
import traceback
from docopt import docopt

REGEXP = [
    re.compile(r'^import (.+)$'),
    re.compile(r'^from ((?!\.+).*?) import (?:.*)$')
]

if sys.version_info[0] > 2:
    open_func = open
else:
    open_func = codecs.open


def get_all_imports(path, encoding=None, extra_ignore_dirs=None):
    imports = set()
    raw_imports = set()
    candidates = []
    ignore_errors = False
    ignore_dirs = [".hg", ".svn", ".git", ".tox", "__pycache__", "env", "venv"]

    if extra_ignore_dirs:
        ignore_dirs_parsed = []
        for e in extra_ignore_dirs:
            ignore_dirs_parsed.append(os.path.basename(os.path.realpath(e)))
        ignore_dirs.extend(ignore_dirs_parsed)

    for root, dirs, files in os.walk(path):
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        candidates.append(os.path.basename(root))
        files = [fn for fn in files if os.path.splitext(fn)[1] == ".py"]

        candidates += [os.path.splitext(fn)[0] for fn in files]
        for file_name in files:
            with open_func(os.path.join(root, file_name), "r", encoding=encoding) as f:
                contents = f.read()
                try:
                    tree = ast.parse(contents)
                    for node in ast.walk(tree):
                        if isinstance(node, ast.Import):
                            for subnode in node.names:
                                raw_imports.add(subnode.name)
                        elif isinstance(node, ast.ImportFrom):
                            raw_imports.add(node.module)
                except Exception as exc:
                    if ignore_errors:
                        traceback.print_exc(exc)
                        logging.warn("Failed on file: %s" % os.path.join(root, file_name))
                        continue
                    else:
                        logging.error("Failed on file: %s" % os.path.join(root, file_name))
                        raise exc

    # Clean up imports
    for name in [n for n in raw_imports if n]:
        # Sanity check: Name could have been None if the import statement was as from . import X
        # Cleanup: We only want to first part of the import.
        # Ex: from django.conf --> django.conf. But we only want django as an import
        cleaned_name, _, _ = name.partition('.')
        imports.add(cleaned_name)

    packages = set(imports) - set(set(candidates) & set(imports))
    logging.debug('Found packages: {0}'.format(packages))

    data = [x.strip() for x in stdlib_list]
    return sorted(list(set(packages) - set(data)))

    # with open(join("stdlib"), "r") as f:
    #     data = [x.strip() for x in f.readlines()]
    #     return sorted(list(set(packages) - set(data)))


def filter_line(l):
    return len(l) > 0 and l[0] != "#"


def generate_requirements_file(path, imports):
    with open(path, "w") as out_file:
        logging.debug('Writing {num} requirements: {imports} to {file}'.format(
            num=len(imports),
            file=path,
            imports=", ".join([x['name'] for x in imports])
        ))
        fmt = '{name}=={version}'
        out_file.write('\n'.join(fmt.format(**item) if item['version'] else '{name}'.format(**item)
                                 for item in imports) + '\n')


def output_requirements(imports):
    logging.debug('Writing {num} requirements: {imports} to stdout'.format(
        num=len(imports),
        imports=", ".join([x['name'] for x in imports])
    ))
    fmt = '{name}=={version}'
    print('\n'.join(fmt.format(**item) if item['version'] else '{name}'.format(**item)
                    for item in imports))


def get_locally_installed_packages(encoding=None):
    packages = {}
    ignore = ["tests", "_tests", "egg", "EGG", "info"]
    for path in sys.path:
        for root, dirs, files in os.walk(path):
            for item in files:
                if "top_level" in item:
                    with open_func(os.path.join(root, item), "r", encoding=encoding) as f:
                        package = root.split(os.sep)[-1].split("-")
                        try:
                            package_import = f.read().strip().split("\n")
                        except:
                            continue
                        for i_item in package_import:
                            if ((i_item not in ignore) and
                                    (package[0] not in ignore)):
                                version = None
                                if len(package) > 1:
                                    version = package[1].replace(
                                        ".dist", "").replace(".egg", "")

                                packages[i_item] = {
                                    'version': version,
                                    'name': package[0]
                                }
    return packages


def get_import_local(imports, encoding=None):
    local = get_locally_installed_packages()
    result = []
    for item in imports:
        if item.lower() in local:
            result.append(local[item.lower()])
    # removing duplicates of package/version
    result_unique = [
        dict(t)
        for t in set([
            tuple(d.items()) for d in result
        ])
    ]

    return result_unique


def join(f):
    return os.path.join(os.path.dirname(__file__), f)


def init(args):
    encoding = args.get('--encoding')
    extra_ignore_dirs = args.get('--ignore')

    if extra_ignore_dirs:
        extra_ignore_dirs = extra_ignore_dirs.split(',')

    candidates = get_all_imports(args['<path>'],
                                 encoding=encoding,
                                 extra_ignore_dirs=extra_ignore_dirs)

    logging.debug("Getting package information ONLY from local installation.")
    imports = get_import_local(candidates, encoding=encoding)
    imports = sorted(imports, key=lambda s: s["name"])
    path = (args["--savepath"] if args["--savepath"] else
            os.path.join(args['<path>'], "requirements.txt"))

    if not args["--print"] and not args["--savepath"] and not args["--force"] and os.path.exists(path):
        logging.warning("Requirements.txt already exists, "
                        "use --force to overwrite it")
        return

    if args["--print"]:
        output_requirements(imports)
        logging.info("Successfully output requirements")
    else:
        generate_requirements_file(path, imports)
        logging.info("Successfully saved requirements file in " + path)


def main():  # pragma: no cover
    args = docopt(__doc__)
    log_level = logging.DEBUG if args['--debug'] else logging.INFO
    logging.basicConfig(level=log_level, format='%(levelname)s: %(message)s')

    try:
        init(args)
    except KeyboardInterrupt:
        sys.exit(0)


stdlib_list = ["__builtin__",
               "__future__",
               "__main__",
               "_winreg",
               "abc",
               "aepack",
               "aetools",
               "aetypes",
               "aifc",
               "AL",
               "al",
               "anydbm",
               "applesingle",
               "argparse",
               "array",
               "ast",
               "asynchat",
               "asyncore",
               "atexit",
               "audioop",
               "autoGIL",
               "base64",
               "BaseHTTPServer",
               "Bastion",
               "bdb",
               "binascii",
               "binhex",
               "bisect",
               "bsddb",
               "buildtools",
               "bz2",
               "calendar",
               "Carbon",
               "Carbon.AE",
               "Carbon.AH",
               "Carbon.App",
               "Carbon.Appearance",
               "Carbon.CarbonEvents",
               "Carbon.CarbonEvt",
               "Carbon.CF",
               "Carbon.CG",
               "Carbon.Cm",
               "Carbon.Components",
               "Carbon.ControlAccessor",
               "Carbon.Controls",
               "Carbon.CoreFounation",
               "Carbon.CoreGraphics",
               "Carbon.Ctl",
               "Carbon.Dialogs",
               "Carbon.Dlg",
               "Carbon.Drag",
               "Carbon.Dragconst",
               "Carbon.Events",
               "Carbon.Evt",
               "Carbon.File",
               "Carbon.Files",
               "Carbon.Fm",
               "Carbon.Folder",
               "Carbon.Folders",
               "Carbon.Fonts",
               "Carbon.Help",
               "Carbon.IBCarbon",
               "Carbon.IBCarbonRuntime",
               "Carbon.Icns",
               "Carbon.Icons",
               "Carbon.Launch",
               "Carbon.LaunchServices",
               "Carbon.List",
               "Carbon.Lists",
               "Carbon.MacHelp",
               "Carbon.MediaDescr",
               "Carbon.Menu",
               "Carbon.Menus",
               "Carbon.Mlte",
               "Carbon.OSA",
               "Carbon.OSAconst",
               "Carbon.Qd",
               "Carbon.Qdoffs",
               "Carbon.QDOffscreen",
               "Carbon.Qt",
               "Carbon.QuickDraw",
               "Carbon.QuickTime",
               "Carbon.Res",
               "Carbon.Resources",
               "Carbon.Scrap",
               "Carbon.Snd",
               "Carbon.Sound",
               "Carbon.TE",
               "Carbon.TextEdit",
               "Carbon.Win",
               "Carbon.Windows",
               "cd",
               "cfmfile",
               "cgi",
               "CGIHTTPServer",
               "cgitb",
               "chunk",
               "cmath",
               "cmd",
               "code",
               "codecs",
               "codeop",
               "collections",
               "ColorPicker",
               "colorsys",
               "commands",
               "compileall",
               "compiler",
               "compiler.ast",
               "compiler.visitor",
               "ConfigParser",
               "contextlib",
               "Cookie",
               "cookielib",
               "copy",
               "copy_reg",
               "cPickle",
               "cProfile",
               "crypt",
               "cStringIO",
               "csv",
               "ctypes",
               "curses",
               "curses.ascii",
               "curses.panel",
               "curses.textpad",
               "datetime",
               "dbhash",
               "dbm",
               "decimal",
               "DEVICE",
               "difflib",
               "dircache",
               "dis",
               "distutils",
               "distutils.archive_util",
               "distutils.bcppcompiler",
               "distutils.ccompiler",
               "distutils.cmd",
               "distutils.command",
               "distutils.command.bdist",
               "distutils.command.bdist_dumb",
               "distutils.command.bdist_msi",
               "distutils.command.bdist_packager",
               "distutils.command.bdist_rpm",
               "distutils.command.bdist_wininst",
               "distutils.command.build",
               "distutils.command.build_clib",
               "distutils.command.build_ext",
               "distutils.command.build_py",
               "distutils.command.build_scripts",
               "distutils.command.check",
               "distutils.command.clean",
               "distutils.command.config",
               "distutils.command.install",
               "distutils.command.install_data",
               "distutils.command.install_headers",
               "distutils.command.install_lib",
               "distutils.command.install_scripts",
               "distutils.command.register",
               "distutils.command.sdist",
               "distutils.core",
               "distutils.cygwinccompiler",
               "distutils.debug",
               "distutils.dep_util",
               "distutils.dir_util",
               "distutils.dist",
               "distutils.emxccompiler",
               "distutils.errors",
               "distutils.extension",
               "distutils.fancy_getopt",
               "distutils.file_util",
               "distutils.filelist",
               "distutils.log",
               "distutils.msvccompiler",
               "distutils.spawn",
               "distutils.sysconfig",
               "distutils.text_file",
               "distutils.unixccompiler",
               "distutils.util",
               "distutils.version",
               "dl",
               "doctest",
               "DocXMLRPCServer",
               "dumbdbm",
               "dummy_thread",
               "dummy_threading",
               "EasyDialogs",
               "email",
               "email.charset",
               "email.encoders",
               "email.errors",
               "email.generator",
               "email.header",
               "email.iterators",
               "email.message",
               "email.mime",
               "email.parser",
               "email.utils",
               "encodings",
               "encodings.idna",
               "encodings.utf_8_sig",
               "ensurepip",
               "errno",
               "exceptions",
               "fcntl",
               "filecmp",
               "fileinput",
               "findertools",
               "FL",
               "fl",
               "flp",
               "fm",
               "fnmatch",
               "formatter",
               "fpectl",
               "fpformat",
               "fractions",
               "FrameWork",
               "ftplib",
               "functools",
               "future_builtins",
               "gc",
               "gdbm",
               "gensuitemodule",
               "getopt",
               "getpass",
               "gettext",
               "gl",
               "GL",
               "glob",
               "grp",
               "gzip",
               "hashlib",
               "heapq",
               "hmac",
               "hotshot",
               "hotshot.stats",
               "htmlentitydefs",
               "htmllib",
               "HTMLParser",
               "httplib",
               "ic",
               "icopen",
               "imageop",
               "imaplib",
               "imgfile",
               "imghdr",
               "imp",
               "importlib",
               "imputil",
               "inspect",
               "io",
               "itertools",
               "jpeg",
               "json",
               "keyword",
               "lib2to3",
               "linecache",
               "locale",
               "logging",
               "logging.config",
               "logging.handlers",
               "macerrors",
               "MacOS",
               "macostools",
               "macpath",
               "macresource",
               "mailbox",
               "mailcap",
               "marshal",
               "math",
               "md5",
               "mhlib",
               "mimetools",
               "mimetypes",
               "MimeWriter",
               "mimify",
               "MiniAEFrame",
               "mmap",
               "modulefinder",
               "msilib",
               "msvcrt",
               "multifile",
               "multiprocessing",
               "multiprocessing.connection",
               "multiprocessing.dummy",
               "multiprocessing.managers",
               "multiprocessing.pool",
               "multiprocessing.sharedctypes",
               "mutex",
               "Nav",
               "netrc",
               "new",
               "nis",
               "nntplib",
               "numbers",
               "operator",
               "optparse",
               "os",
               "os.path",
               "ossaudiodev",
               "parser",
               "pdb",
               "pickle",
               "pickletools",
               "pipes",
               "PixMapWrapper",
               "pkgutil",
               "platform",
               "plistlib",
               "popen2",
               "poplib",
               "posix",
               "posixfile",
               "pprint",
               "profile",
               "pstats",
               "pty",
               "pwd",
               "py_compile",
               "pyclbr",
               "pydoc",
               "Queue",
               "quopri",
               "random",
               "re",
               "readline",
               "resource",
               "rexec",
               "rfc822",
               "rlcompleter",
               "robotparser",
               "runpy",
               "sched",
               "ScrolledText",
               "select",
               "sets",
               "sgmllib",
               "sha",
               "shelve",
               "shlex",
               "shutil",
               "signal",
               "SimpleHTTPServer",
               "SimpleXMLRPCServer",
               "site",
               "smtpd",
               "smtplib",
               "sndhdr",
               "socket",
               "SocketServer",
               "spwd",
               "sqlite3",
               "ssl",
               "stat",
               "statvfs",
               "string",
               "StringIO",
               "stringprep",
               "struct",
               "subprocess",
               "sunau",
               "sunaudiodev",
               "SUNAUDIODEV",
               "symbol",
               "symtable",
               "sys",
               "sysconfig",
               "syslog",
               "tabnanny",
               "tarfile",
               "telnetlib",
               "tempfile",
               "termios",
               "test",
               "test.test_support",
               "textwrap",
               "thread",
               "threading",
               "time",
               "timeit",
               "Tix",
               "Tkinter",
               "token",
               "tokenize",
               "trace",
               "traceback",
               "ttk",
               "tty",
               "turtle",
               "types",
               "unicodedata",
               "unittest",
               "urllib",
               "urllib2",
               "urlparse",
               "user",
               "UserDict",
               "UserList",
               "UserString",
               "uu",
               "uuid",
               "videoreader",
               "W",
               "warnings",
               "wave",
               "weakref",
               "webbrowser",
               "whichdb",
               "winsound",
               "wsgiref",
               "wsgiref.handlers",
               "wsgiref.headers",
               "wsgiref.simple_server",
               "wsgiref.util",
               "wsgiref.validate",
               "xdrlib",
               "xml",
               "xml.dom",
               "xml.dom.minidom",
               "xml.dom.pulldom",
               "xml.etree.ElementTree",
               "xml.parsers.expat",
               "xml.sax",
               "xml.sax.handler",
               "xml.sax.saxutils",
               "xml.sax.xmlreader",
               "xmlrpclib",
               "zipfile",
               "zipimport",
               "zlib",
               "__future__",
               "__main__",
               "_dummy_thread",
               "_thread",
               "abc",
               "aifc",
               "argparse",
               "array",
               "ast",
               "asynchat",
               "asyncio",
               "asyncore",
               "atexit",
               "audioop",
               "base64",
               "bdb",
               "binascii",
               "binhex",
               "bisect",
               "builtins",
               "bz2",
               "calendar",
               "cgi",
               "cgitb",
               "chunk",
               "cmath",
               "cmd",
               "code",
               "codecs",
               "codeop",
               "collections",
               "collections.abc",
               "colorsys",
               "compileall",
               "concurrent",
               "concurrent.futures",
               "configparser",
               "contextlib",
               "copy",
               "copyreg",
               "cProfile",
               "crypt",
               "csv",
               "ctypes",
               "curses",
               "curses.ascii",
               "curses.panel",
               "curses.textpad",
               "datetime",
               "dbm",
               "dbm.dumb",
               "dbm.gnu",
               "dbm.ndbm",
               "decimal",
               "difflib",
               "dis",
               "distutils",
               "distutils.archive_util",
               "distutils.bcppcompiler",
               "distutils.ccompiler",
               "distutils.cmd",
               "distutils.command",
               "distutils.command.bdist",
               "distutils.command.bdist_dumb",
               "distutils.command.bdist_msi",
               "distutils.command.bdist_packager",
               "distutils.command.bdist_rpm",
               "distutils.command.bdist_wininst",
               "distutils.command.build",
               "distutils.command.build_clib",
               "distutils.command.build_ext",
               "distutils.command.build_py",
               "distutils.command.build_scripts",
               "distutils.command.check",
               "distutils.command.clean",
               "distutils.command.config",
               "distutils.command.install",
               "distutils.command.install_data",
               "distutils.command.install_headers",
               "distutils.command.install_lib",
               "distutils.command.install_scripts",
               "distutils.command.register",
               "distutils.command.sdist",
               "distutils.core",
               "distutils.cygwinccompiler",
               "distutils.debug",
               "distutils.dep_util",
               "distutils.dir_util",
               "distutils.dist",
               "distutils.errors",
               "distutils.extension",
               "distutils.fancy_getopt",
               "distutils.file_util",
               "distutils.filelist",
               "distutils.log",
               "distutils.msvccompiler",
               "distutils.spawn",
               "distutils.sysconfig",
               "distutils.text_file",
               "distutils.unixccompiler",
               "distutils.util",
               "distutils.version",
               "doctest",
               "dummy_threading",
               "email",
               "email.charset",
               "email.contentmanager",
               "email.encoders",
               "email.errors",
               "email.generator",
               "email.header",
               "email.headerregistry",
               "email.iterators",
               "email.message",
               "email.mime",
               "email.parser",
               "email.policy",
               "email.utils",
               "encodings",
               "encodings.idna",
               "encodings.mbcs",
               "encodings.utf_8_sig",
               "ensurepip",
               "enum",
               "errno",
               "faulthandler",
               "fcntl",
               "filecmp",
               "fileinput",
               "fnmatch",
               "formatter",
               "fpectl",
               "fractions",
               "ftplib",
               "functools",
               "gc",
               "getopt",
               "getpass",
               "gettext",
               "glob",
               "grp",
               "gzip",
               "hashlib",
               "heapq",
               "hmac",
               "html",
               "html.entities",
               "html.parser",
               "http",
               "http.client",
               "http.cookiejar",
               "http.cookies",
               "http.server",
               "imaplib",
               "imghdr",
               "imp",
               "importlib",
               "importlib.abc",
               "importlib.machinery",
               "importlib.util",
               "inspect",
               "io",
               "ipaddress",
               "itertools",
               "json",
               "keyword",
               "lib2to3",
               "linecache",
               "locale",
               "logging",
               "logging.config",
               "logging.handlers",
               "lzma",
               "macpath",
               "mailbox",
               "mailcap",
               "marshal",
               "math",
               "mimetypes",
               "mmap",
               "modulefinder",
               "msilib",
               "msvcrt",
               "multiprocessing",
               "multiprocessing.connection",
               "multiprocessing.dummy",
               "multiprocessing.managers",
               "multiprocessing.pool",
               "multiprocessing.sharedctypes",
               "netrc",
               "nis",
               "nntplib",
               "numbers",
               "operator",
               "optparse",
               "os",
               "os.path",
               "ossaudiodev",
               "parser",
               "pathlib",
               "pdb",
               "pickle",
               "pickletools",
               "pipes",
               "pkgutil",
               "platform",
               "plistlib",
               "poplib",
               "posix",
               "pprint",
               "profile",
               "pstats",
               "pty",
               "pwd",
               "py_compile",
               "pyclbr",
               "pydoc",
               "queue",
               "quopri",
               "random",
               "re",
               "readline",
               "reprlib",
               "resource",
               "rlcompleter",
               "runpy",
               "sched",
               "select",
               "selectors",
               "shelve",
               "shlex",
               "shutil",
               "signal",
               "site",
               "smtpd",
               "smtplib",
               "sndhdr",
               "socket",
               "socketserver",
               "spwd",
               "sqlite3",
               "ssl",
               "stat",
               "statistics",
               "string",
               "stringprep",
               "struct",
               "subprocess",
               "sunau",
               "symbol",
               "symtable",
               "sys",
               "sysconfig",
               "syslog",
               "tabnanny",
               "tarfile",
               "telnetlib",
               "tempfile",
               "termios",
               "test",
               "test.support",
               "textwrap",
               "threading",
               "time",
               "timeit",
               "tkinter",
               "tkinter.scrolledtext",
               "tkinter.tix",
               "tkinter.ttk",
               "token",
               "tokenize",
               "trace",
               "traceback",
               "tracemalloc",
               "tty",
               "turtle",
               "turtledemo",
               "types",
               "unicodedata",
               "unittest",
               "unittest.mock",
               "urllib",
               "urllib.error",
               "urllib.parse",
               "urllib.request",
               "urllib.response",
               "urllib.robotparser",
               "uu",
               "uuid",
               "venv",
               "warnings",
               "wave",
               "weakref",
               "webbrowser",
               "winreg",
               "winsound",
               "wsgiref",
               "wsgiref.handlers",
               "wsgiref.headers",
               "wsgiref.simple_server",
               "wsgiref.util",
               "wsgiref.validate",
               "xdrlib",
               "xml",
               "xml.dom",
               "xml.dom.minidom",
               "xml.dom.pulldom",
               "xml.etree.ElementTree",
               "xml.parsers.expat",
               "xml.parsers.expat.errors",
               "xml.parsers.expat.model",
               "xml.sax",
               "xml.sax.handler",
               "xml.sax.saxutils",
               "xml.sax.xmlreader",
               "xmlrpc",
               "xmlrpc.client",
               "xmlrpc.server",
               "zipfile",
               "zipimport",
               "zlib",
               "__future__",
               "__main__",
               "_dummy_thread",
               "_thread",
               "abc",
               "aifc",
               "argparse",
               "array",
               "ast",
               "asynchat",
               "asyncio",
               "asyncore",
               "atexit",
               "audioop",
               "base64",
               "bdb",
               "binascii",
               "binhex",
               "bisect",
               "builtins",
               "bz2",
               "calendar",
               "cgi",
               "cgitb",
               "chunk",
               "cmath",
               "cmd",
               "code",
               "codecs",
               "codeop",
               "collections",
               "collections.abc",
               "colorsys",
               "compileall",
               "concurrent",
               "concurrent.futures",
               "configparser",
               "contextlib",
               "copy",
               "copyreg",
               "cProfile",
               "crypt",
               "csv",
               "ctypes",
               "curses",
               "curses.ascii",
               "curses.panel",
               "curses.textpad",
               "datetime",
               "dbm",
               "dbm.dumb",
               "dbm.gnu",
               "dbm.ndbm",
               "decimal",
               "difflib",
               "dis",
               "distutils",
               "distutils.archive_util",
               "distutils.bcppcompiler",
               "distutils.ccompiler",
               "distutils.cmd",
               "distutils.command",
               "distutils.command.bdist",
               "distutils.command.bdist_dumb",
               "distutils.command.bdist_msi",
               "distutils.command.bdist_packager",
               "distutils.command.bdist_rpm",
               "distutils.command.bdist_wininst",
               "distutils.command.build",
               "distutils.command.build_clib",
               "distutils.command.build_ext",
               "distutils.command.build_py",
               "distutils.command.build_scripts",
               "distutils.command.check",
               "distutils.command.clean",
               "distutils.command.config",
               "distutils.command.install",
               "distutils.command.install_data",
               "distutils.command.install_headers",
               "distutils.command.install_lib",
               "distutils.command.install_scripts",
               "distutils.command.register",
               "distutils.command.sdist",
               "distutils.core",
               "distutils.cygwinccompiler",
               "distutils.debug",
               "distutils.dep_util",
               "distutils.dir_util",
               "distutils.dist",
               "distutils.errors",
               "distutils.extension",
               "distutils.fancy_getopt",
               "distutils.file_util",
               "distutils.filelist",
               "distutils.log",
               "distutils.msvccompiler",
               "distutils.spawn",
               "distutils.sysconfig",
               "distutils.text_file",
               "distutils.unixccompiler",
               "distutils.util",
               "distutils.version",
               "doctest",
               "dummy_threading",
               "email",
               "email.charset",
               "email.contentmanager",
               "email.encoders",
               "email.errors",
               "email.generator",
               "email.header",
               "email.headerregistry",
               "email.iterators",
               "email.message",
               "email.mime",
               "email.parser",
               "email.policy",
               "email.utils",
               "encodings",
               "encodings.idna",
               "encodings.mbcs",
               "encodings.utf_8_sig",
               "ensurepip",
               "enum",
               "errno",
               "faulthandler",
               "fcntl",
               "filecmp",
               "fileinput",
               "fnmatch",
               "formatter",
               "fpectl",
               "fractions",
               "ftplib",
               "functools",
               "gc",
               "getopt",
               "getpass",
               "gettext",
               "glob",
               "grp",
               "gzip",
               "hashlib",
               "heapq",
               "hmac",
               "html",
               "html.entities",
               "html.parser",
               "http",
               "http.client",
               "http.cookiejar",
               "http.cookies",
               "http.server",
               "imaplib",
               "imghdr",
               "imp",
               "importlib",
               "importlib.abc",
               "importlib.machinery",
               "importlib.util",
               "inspect",
               "io",
               "ipaddress",
               "itertools",
               "json",
               "json.tool",
               "keyword",
               "lib2to3",
               "linecache",
               "locale",
               "logging",
               "logging.config",
               "logging.handlers",
               "lzma",
               "macpath",
               "mailbox",
               "mailcap",
               "marshal",
               "math",
               "mimetypes",
               "mmap",
               "modulefinder",
               "msilib",
               "msvcrt",
               "multiprocessing",
               "multiprocessing.connection",
               "multiprocessing.dummy",
               "multiprocessing.managers",
               "multiprocessing.pool",
               "multiprocessing.sharedctypes",
               "netrc",
               "nis",
               "nntplib",
               "numbers",
               "operator",
               "optparse",
               "os",
               "os.path",
               "ossaudiodev",
               "parser",
               "pathlib",
               "pdb",
               "pickle",
               "pickletools",
               "pipes",
               "pkgutil",
               "platform",
               "plistlib",
               "poplib",
               "posix",
               "pprint",
               "profile",
               "pstats",
               "pty",
               "pwd",
               "py_compile",
               "pyclbr",
               "pydoc",
               "queue",
               "quopri",
               "random",
               "re",
               "readline",
               "reprlib",
               "resource",
               "rlcompleter",
               "runpy",
               "sched",
               "select",
               "selectors",
               "shelve",
               "shlex",
               "shutil",
               "signal",
               "site",
               "smtpd",
               "smtplib",
               "sndhdr",
               "socket",
               "socketserver",
               "spwd",
               "sqlite3",
               "ssl",
               "stat",
               "statistics",
               "string",
               "stringprep",
               "struct",
               "subprocess",
               "sunau",
               "symbol",
               "symtable",
               "sys",
               "sysconfig",
               "syslog",
               "tabnanny",
               "tarfile",
               "telnetlib",
               "tempfile",
               "termios",
               "test",
               "test.support",
               "textwrap",
               "threading",
               "time",
               "timeit",
               "tkinter",
               "tkinter.scrolledtext",
               "tkinter.tix",
               "tkinter.ttk",
               "token",
               "tokenize",
               "trace",
               "traceback",
               "tracemalloc",
               "tty",
               "turtle",
               "turtledemo",
               "types",
               "unicodedata",
               "unittest",
               "unittest.mock",
               "urllib",
               "urllib.error",
               "urllib.parse",
               "urllib.request",
               "urllib.response",
               "urllib.robotparser",
               "uu",
               "uuid",
               "venv",
               "warnings",
               "wave",
               "weakref",
               "webbrowser",
               "winreg",
               "winsound",
               "wsgiref",
               "wsgiref.handlers",
               "wsgiref.headers",
               "wsgiref.simple_server",
               "wsgiref.util",
               "wsgiref.validate",
               "xdrlib",
               "xml",
               "xml.dom",
               "xml.dom.minidom",
               "xml.dom.pulldom",
               "xml.etree.ElementTree",
               "xml.parsers.expat",
               "xml.parsers.expat.errors",
               "xml.parsers.expat.model",
               "xml.sax",
               "xml.sax.handler",
               "xml.sax.saxutils",
               "xml.sax.xmlreader",
               "xmlrpc",
               "xmlrpc.client",
               "xmlrpc.server",
               "zipapp",
               "zipfile",
               "zipimport",
               "zlib"]
if __name__ == '__main__':
    main()  # pragma: no cover
